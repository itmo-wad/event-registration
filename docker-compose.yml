version: '3'
services:
  flask:
    build:
      context: flask
      dockerfile: Dockerfile
    container_name: flask
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_DEBUG: "false" ##Change on a production
      MONGODB_DATABASE: eventsdb
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: root
      MONGODB_HOSTNAME: mongodb
    ports:
      - 5000:5000
    volumes:
      - appdata:/var/www
    depends_on:
      - mongodb
    networks:
      - backend
      - frontend

  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_NAME: "nginx"
      APP_DEBUG: "false"
      SERVICE_NAME: "nginx"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx  
    depends_on:
      - flask
    networks:
      - frontend

  mongodb:
    image: mongo
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: eventsdb
      MONGO_DATA_DIR: /data/db
      MONGO_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
    networks:
      - backend

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongodb:27017/
    networks:
      - backend

  # redis:
  #   image: redis
  #   volumes:
  #     - redisdata:/data
  #   ports:
  #     -"6379:6379"

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local